#!/usr/bin/env python3
import ast
import argparse
import sys
import os
import re


IGNORE_DIRECTORIES = ["__pycache__", ".git"]


def echo(*args):
    """Avoiding print so it works with Python 2 and 3"""
    output = " ".join([str(i) for i in args]) + "\n"
    sys.stdout.write(output)


class SourceCode(object):
    def __init__(self, filename, offset=1):
        """
        offset is the difference between 0 and the number of the first line of the file.  It's probably 1
        """
        self.offset = offset
        self.filename = filename
        self.lines = []
        with open(filename, "r") as f:
            self.lines = f.readlines()

    def __repr__(self):
        return "SourceCode('{}', {})".format(self.filename, self.offset)

    def line(self, lineno):
        return self.lines[lineno - self.offset]

    @property
    def numlines(self):
        return len(self.lines)

    def format_line(self, lineno):
        return "{}:  {}".format(str(lineno).rjust(len(str(self.numlines))), self.line(lineno))


def make_default_matcher(look_for):
    def _matcher(node):
        try: lineno = node.lineno
        except: return None
    
        # TODO: this is so ugly, make it better:
        if type(look_for) is int and lineno == look_for:
            return lineno
        else:
            for attr in node._fields:
                if type(look_for) is str and getattr(node, attr) == look_for:
                    return lineno
                else:  # assume it's a regex
                    try:
                        if look_for.match(getattr(node, attr)):
                            return lineno
                    except:
                        continue

        return None
    return _matcher


def walk(node, matcher, history=None):
    history = [] if history is None else history[:]
    matches = []

    def add_to_history(item):
        try: history.append(item.lineno)
        except AttributeError: pass

    def pop_from_history():
        try: history.pop()
        except IndexError: pass

    children = list(ast.iter_child_nodes(node))
    match = matcher(node)

    if match:
        matches.append(match)
        matches = list(set(matches + history))

    if len(children) == 0:
        return matches

    add_to_history(node)
    for i in children:
        add_to_history(i)
        matches.extend(walk(i, matcher, history))
        pop_from_history()
    pop_from_history()

    return matches


def find_top_level(tree, depth=1):
    matches = [i.lineno for i in ast.iter_child_nodes(tree) if isinstance(i, (ast.FunctionDef, ast.ClassDef))]
    return matches


def find_context(tree, look_for):
    """
    Return a list of lines indicating branches that lead to the object we're looking for
    """
    # TODO: Add something to parse look_for, for example FooClass.bar should only match bar
    #       function calls that are attributes of a FooClass instance
    matches = walk(tree, make_default_matcher(look_for))
    matches = list(set(matches))
    return sorted(matches)


def parse_source(filename):
    with open(filename, "r") as f:
        tree = ast.parse(f.read(), filename=filename)
    return tree


def main(look_for, files, search_type='default', recursive=False, ignore=IGNORE_DIRECTORIES, verbose=False, definitions=False):
    """
    search_type can be default|lineno|regex
    """
    if search_type == "regex":
        look_for = re.compile(look_for)
    elif search_type == "lineno":
        look_for = int(look_for)

    if recursive:
        files = os.walk(files)
    else:
        files = [('', [], [files])]  # match format generated by os.walk

    skipped_files = {}

    for (directory, _, filenames) in files:
        abspath = os.path.abspath(directory)
        ignore = [os.path.abspath(i) for i in ignore]
        if abspath in ignore:
            continue
        for fn in filenames:
            if os.path.abspath(fn) in ignore:
                continue
            source_file = os.path.join(directory, fn)
            try:
                source = SourceCode(source_file)
                tree = parse_source(source_file)
                if definitions:
                    context = find_top_level(tree)
                else:
                    context = find_context(tree, look_for)
            except KeyboardInterrupt as e:
                sys.exit(1)
            except Exception as e:
                skipped_files[source_file] = e
                continue
            if len(context) == 0:
                continue
            if recursive:
                echo("\n{}".format(source_file))
            echo("\n" + "".join([source.format_line(i) for i in context]))

        if verbose and skipped_files:
            echo("Skipped these files due to errors:\n{}".format(
                "\n".join(["{}: {}".format(key, skipped_files[key]) for key in skipped_files])))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("look_for", help="object to look for in the file")
    parser.add_argument("path", help="file (or directory if -r option) to look in")
    parser.add_argument("-r", "--recursive", help="recursively search directory", action="store_true")
    parser.add_argument("-n", "--searchline", help="search by line number", action="store_true")
    parser.add_argument("-e", "--searchregex", help="search by regexp", action="store_true")
    parser.add_argument("-v", "--verbose", help="display information about errors and skipped files", action="store_true")
    parser.add_argument(
        "-i", "--ignore",
        help="comma-separated list of files and directories to ignore, default is {}".format(IGNORE_DIRECTORIES))
    parser.add_argument("-d", "--definitions", action="store_true",
                        help="just look for class and function defintions.  The look_for argument should be an integer indicating the maxmimum depth of search")
        

    args = parser.parse_args()

    if args.ignore:
        ignore = args.ignore.split(",") + IGNORE_DIRECTORIES
    else:
        ignore = IGNORE_DIRECTORIES

    if args.searchline:
        search_type = "lineno"
    elif args.searchregex:
        search_type = "regex"
    else:
        search_type = "default"

    main(args.look_for,
         args.path,
         search_type=search_type,
         recursive=args.recursive,
         ignore=ignore,
         verbose=args.verbose,
         definitions=args.definitions)
