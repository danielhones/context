#!/usr/bin/env python3
import argparse
import ast
import glob
import itertools
import os
import re
import sys
import traceback


SEARCH_LINENO, SEARCH_REGEX, SEARCH_DEFINITIONS = range(3)
SEARCH_DEFAULT = SEARCH_REGEX
BLUE = "\033[34m"
LIGHT_GREEN =  "\033[92m"
END_COLOR = "\033[0m"


def insert_term_color(string, start, end, color):
    return string[:start] + color + string[start:end] + END_COLOR + string[end:]


def last_block_lineno(node_list):
    """Given a list of ast.AST nodes, return the last line number or as close as we can get"""
    node = node_list[-1]
    lineno = node.lineno
    for name, field in ast.iter_fields(node):
        if isinstance(field, list) and len(field) > 0:
            candidate = last_block_lineno(field)
            if candidate > lineno:
                lineno = candidate
    return lineno


class Else():
    def __init__(self, main_node):
        self.main_node = main_node
        self._linenos = None

    def calc_linenos(self):
        start = last_block_lineno(self.main_node.body) + 1
        linenos = list(range(start, self.main_node.orelse[0].lineno))
        return linenos

    def linenos(self):
        if self._linenos is not None:
            return self._linenos

        self._linenos = self.calc_linenos()
        return self._linenos


class TryElse(Else):
    def calc_linenos(self):
        start = last_block_lineno(self.main_node.handlers) + 1
        end = self.main_node.orelse[0].lineno
        linenos =  [i.lineno for i in self.main_node.handlers] + \
                   list(range(start, end))
        return linenos


class TryFinally(TryElse):
    def linenos(self):
        if self._linenos is not None:
            return self._linenos

        if len(self.main_node.orelse ) > 0:
            else_lines = super().calc_linenos()
            start = last_block_lineno(self.main_node.orelse) + 1
        else:
            else_lines = []
            start = last_block_lineno(self.main_node.handlers)

        self._linenos = else_lines + list(range(start, self.main_node.finalbody[0].lineno))
        return self._linenos


class Matcher(ast.NodeVisitor):
    def __init__(self, look_for, lines, offset=1):
        self.lines = lines
        self.offset = offset
        self.look_for = self.format_look_for(look_for)
        self.history = []
        self.matches = []
        self.current_elses = []

    def format_look_for(self, look_for):
        return look_for

    def color_line(self, lineno, line, line_color=None):
        return line
    
    def make_iterator_for_else(self, handlers):
        """Adapted from Lib/ast.py in CPython source code

        handlers should be a dict of the form {<field name>: <class to call>}
        """
        def iter_fields(node):
            for field in node._fields:
                try:
                    if field in handlers and len(getattr(node, field)) > 0:
                        self.current_elses.append(handlers[field](node))
                        yield field, getattr(node, field)
                        self.current_elses.pop()
                    else:
                        yield field, getattr(node, field)
                except AttributeError:
                    pass
 
        def iter_child_nodes(node):
            for name, field in iter_fields(node):
                if isinstance(field, ast.AST):
                    yield field
                elif isinstance(field, list):
                    for item in field:
                        if isinstance(item, ast.AST):
                            yield item

        return iter_child_nodes

    def visit_If(self, node):
        self.generic_visit(node, iter_node_func=self.make_iterator_for_else({'orelse': Else}))

    def visit_Try(self, node):
        self.generic_visit(node, iter_node_func=self.make_iterator_for_else(
            {'orelse': TryElse, 'finalbody': TryFinally}))

    def generic_visit(self, node, iter_node_func=ast.iter_child_nodes):
        history_added = 0
        if len(self.current_elses) > 0:
            self.history += self.current_elses[-1].linenos()
            history_added += len(self.current_elses[-1].linenos())

        try:
            self.history.append(node.lineno)
            history_added += 1
        except:
            pass

        match = self.node_matches(node)
        if match:
            self.matches = self.matches + self.history + [match]

            if len(self.current_elses) > 0:
                for _ in range(len(self.current_elses[-1].linenos())):
                    self.history.pop()
                history_added -= len(self.current_elses[-1].linenos())

        for i in iter_node_func(node):
            self.visit(i)

        if history_added > 0 and len(self.history) > 0:
            for _ in range(history_added):
                self.history.pop()

    def node_matches(self, node):
        """
        Must be implemented by a subclass.
        Return the line number if the node matches or None otherwise.
        """
        raise NotImplementedError("node_matches must be overridden by a subclass")


class LineNoMatcher(Matcher):
    def format_look_for(self, look_for):
        if type(look_for) not in [list, tuple]:
            return [int(look_for)]
        else:
            return [int(i) for i in look_for]

    def color_line(self, lineno, line, line_color=None):
        if lineno in self.look_for and line_color is not None:
            return insert_term_color(line, 0, len(line), line_color)
        return line

    def node_matches(self, node):
        try:
            lineno = node.lineno
            return lineno if lineno in self.look_for else None
        except Exception as e:
            return None


class RegexMatcher(LineNoMatcher):
    def format_look_for(self, look_for):
        self.look_for_re = re.compile("({})".format(look_for))
        # This looks strange, but the idea here is to find the lines that match our regex,
        # then use the LineNoMatcher.node_matches to indicate that those lines match
        matching_lines = [i + self.offset for i, j in enumerate(self.lines)
                          if self.look_for_re.search(j)]
        return matching_lines

    def color_line(self, lineno, line, line_color=None):
        match = self.look_for_re.search(line)
        if match and line_color is not None:
            return insert_term_color(line, match.span()[0], match.span()[1], line_color)
        return line


class SourceCode():
    def __init__(self, source, matcher_class, look_for=None, num_color=None,
                 line_color=None, offset=1, filename='', number_lines=None):
        """
        offset is the difference between the number of the first line
        of the file and 0.  It's probably 1.
        """
        self.source = source
        self.filename = filename
        self.lines = []
        self.look_for = look_for
        self.num_color = num_color
        self.line_color = line_color
        self.number_lines = number_lines
        self.offset = offset
        self.lines = self.source.readlines()
        self.raw_source = "".join(self.lines)
        self.matcher = matcher_class(self.look_for, self.lines, self.offset)
        self.matches = []
        self.context = None

    def find_context(self):
        tree = ast.parse(self.raw_source, filename=self.filename)
        for node in ast.iter_child_nodes(tree):
            self.matcher.visit(node)
        self.matches = sorted(set(self.matcher.matches))
        self.context = [self.format_line(i) for i in self.matches]
        return self.context

    def line(self, lineno):
        return self.lines[lineno - self.offset]

    @property
    def numlines(self):
        return len(self.lines)

    def add_num_color(self, lineno):
        if self.num_color is not None:
            return insert_term_color(lineno, 0, len(lineno), self.num_color)
        return lineno

    def format_line(self, lineno):
        line = self.line(lineno)
        colored_line = self.matcher.color_line(lineno,
                                               line,
                                               line_color=self.line_color)
        if self.number_lines:
            num_padding = len(str(self.numlines))
            colored_num = self.add_num_color(str(lineno).rjust(num_padding))
            return "{}: {}".format(colored_num, colored_line)
        else:
            return colored_line


def main(look_for, files, search_type=None, ignore=None, verbose=0, color=False,
         number_lines=False, output=sys.stdout, errout=sys.stderr):
    """
    look_for is a string, files is a list of paths
    """
    num_color = BLUE if color else None
    line_color = LIGHT_GREEN if color else None
    all_contexts = {}
    skipped_files = {}
    if search_type is None:
        search_type = SEARCH_DEFAULT

    if type(files) != list:
        files = [files]

    if search_type == SEARCH_REGEX:
        matcher = RegexMatcher
    elif search_type == SEARCH_LINENO:
        matcher = LineNoMatcher

    for f in files:
        try:
            source = SourceCode(f, matcher, look_for, filename=f.name,
                                line_color=line_color, num_color=num_color,
                                number_lines=number_lines)
            context = source.find_context()
            if context:
                result = ["\n", f.name, "\n\n"] if len(files) > 1 else ["\n"]
                result += context
                result.append("\n")
                output.write("".join(result))
                all_contexts[f.name] = context
        except Exception as e:
            if verbose == 1:
                skipped_files[f.name] = e
            elif verbose == 2:
                skipped_files[f.name] = "{}\n{}".format(e, traceback.format_exc())

    if verbose > 0 and skipped_files:
        errout.write("\nSkipped these files due to errors:\n")
        [errout.write("{}: {}\n".format(key, skipped_files[key])) for key in skipped_files]

    return all_contexts


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Find lines in a Python source file and the context they're in."
    )
    parser.add_argument("look_for",
                        help=("Object to look for in the file.  For certain search"
                              "types this can be a comma-separated list such as \"6,8,10\""))
    parser.add_argument("paths",
                        nargs="*",
                        type=argparse.FileType('r'),
                        default=sys.stdin,
                        help=("Files to look in. If there is no argument passed here, read from STDIN"))
    parser.add_argument("-c", "--color", action="store_true", help="colorize output")
    parser.add_argument("-n", "--number-lines", action="store_true", dest="number_lines",
                        help="include line numbers in results")
    parser.add_argument("-l", "--search-line", dest="search_type",
                        action="store_const", const=SEARCH_LINENO,
                        help="Search by line number.  Allows a list as the look_for argument")
    parser.add_argument("-e", "--search-regex", dest="search_type", action="store_const",
                        const=SEARCH_REGEX, help="search by regexp")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="Display information about errors and skipped files")
    args = parser.parse_args()
    look_for = args.look_for
    if args.search_type == SEARCH_LINENO:
        try:
            look_for = args.look_for.split(',')
        except:
            pass

    main(look_for,
         args.paths,
         search_type=args.search_type,
         verbose=args.verbose,
         color=args.color,
         number_lines=args.number_lines)
